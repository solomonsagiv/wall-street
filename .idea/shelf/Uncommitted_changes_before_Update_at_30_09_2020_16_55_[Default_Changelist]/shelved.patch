Index: src/main/java/options/Options.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package options;\r\n\r\nimport charts.myChart.MyTimeSeries;\r\nimport com.ib.client.Types;\r\nimport exp.Exp;\r\nimport lists.MyDoubleList;\r\nimport locals.IJson;\r\nimport locals.L;\r\nimport myJson.MyJson;\r\nimport options.optionsCalcs.IOptionsCalcs;\r\nimport org.json.JSONObject;\r\nimport serverObjects.BASE_CLIENT_OBJECT;\r\nimport tws.MyContract;\r\n\r\nimport java.net.UnknownHostException;\r\nimport java.time.LocalDate;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.*;\r\n\r\npublic class Options implements IJson {\r\n\r\n    protected OptionsProps props;\r\n    protected Exp exp;\r\n    protected int baseID = 0;\r\n    protected int minId = 0;\r\n    protected int maxId = 0;\r\n    protected boolean gotData = false;\r\n    protected double contractBid = 0;\r\n    protected double contractAsk = 0;\r\n    protected double currStrike = 0;\r\n    protected int contractBidAskCounter = 0;\r\n    OptionsDDeCells optionsDDeCells;\r\n    List<Strike> strikes;\r\n    HashMap<Integer, Option> optionsMap;\r\n    BASE_CLIENT_OBJECT client;\r\n    double bidMin = 0;\r\n    double askMax = 0;\r\n    // Exp date\r\n    LocalDate expDate;\r\n    MyDoubleList conList = new MyDoubleList();\r\n    MyDoubleList conBidList = new MyDoubleList();\r\n    MyDoubleList conAskList = new MyDoubleList();\r\n    MyDoubleList opAvgList = new MyDoubleList();\r\n    MyDoubleList opList = new MyDoubleList();\r\n    MyTimeSeries conBidAskCounterSeries;\r\n    MyTimeSeries opAvgSeries;\r\n    IOptionsCalcs iOptionsCalcs;\r\n    private boolean requested = false;\r\n    private double contract = 0;\r\n    private double conAskForCheck = 0;\r\n    private double conBidForCheck = 0;\r\n\r\n    public Options(BASE_CLIENT_OBJECT client, Exp exp, IOptionsCalcs iOptionsCalcs) {\r\n        this.client = client;\r\n        this.exp = exp;\r\n        this.iOptionsCalcs = iOptionsCalcs;\r\n\r\n        strikes = new ArrayList<>();\r\n        optionsMap = new HashMap<>();\r\n        props = new OptionsProps();\r\n        initSeries();\r\n    }\r\n\r\n    public Options(BASE_CLIENT_OBJECT client, Exp exp, IOptionsCalcs iOptionsCalcs, OptionsDDeCells dDeCells) {\r\n        this(client, exp, iOptionsCalcs);\r\n        this.optionsDDeCells = dDeCells;\r\n    }\r\n\r\n    public void initSeries() {\r\n        conBidAskCounterSeries = new MyTimeSeries(\"conBidAskCounter\", client) {\r\n            @Override\r\n            public double getData() throws UnknownHostException {\r\n                return getConBidAskCounter();\r\n            }\r\n        };\r\n\r\n        opAvgSeries = new MyTimeSeries(\"opAvg\", client) {\r\n            @Override\r\n            public double getData() throws UnknownHostException {\r\n                return getOpAvg();\r\n            }\r\n        };\r\n    }\r\n\r\n    public Call getCall(double targetStrike) {\r\n        for (Strike strike : strikes) {\r\n            if (targetStrike == strike.getStrike()) {\r\n                return strike.getCall();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public Put getPut(double targetStrike) {\r\n        for (Strike strike : strikes) {\r\n            if (targetStrike == strike.getStrike()) {\r\n                return strike.getPut();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public void initOptions() {\r\n\r\n        double startStrike = client.getStartStrike();\r\n        double endStrike = client.getEndStrike();\r\n\r\n        int id = exp.getTwsContract().getMyId();\r\n\r\n        for (double strike = startStrike; strike < endStrike; strike += client.getStrikeMargin()) {\r\n\r\n            // ----- Call ------ //\r\n            Call call = new Call(strike, id);\r\n\r\n            MyContract contractCall = new MyContract(exp.getTwsContract());\r\n\r\n            // MyTwsContract\r\n            contractCall.setMyId(id);\r\n            contractCall.strike(strike);\r\n            contractCall.right(Types.Right.Call);\r\n\r\n            client.getTwsHandler().addContract(contractCall);\r\n\r\n            call.setMyContract(contractCall);\r\n\r\n            setOption(call);\r\n            id++;\r\n\r\n            // ----- Put ------ //\r\n            Put put = new Put(strike, id);\r\n\r\n            MyContract contractPut = new MyContract(exp.getTwsContract());\r\n\r\n            // MyTwsContract\r\n            contractPut.setMyId(id);\r\n            contractPut.strike(strike);\r\n            contractPut.right(Types.Right.Put);\r\n            client.getTwsHandler().addContract(contractPut);\r\n\r\n            put.setMyContract(contractPut);\r\n\r\n            setOption(put);\r\n            id++;\r\n\r\n        }\r\n    }\r\n\r\n    public void setOpValues(double val) {\r\n        if (!opList.isEmpty()) {\r\n            double size = getOpList().size();\r\n            opList.clear();\r\n            for (int i = 0; i < size; i++) {\r\n                opList.add(val);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void removeStrike(double strikeToRemove) {\r\n        for (Strike strike : getStrikes()) {\r\n            if (strikeToRemove == strike.getStrike()) {\r\n                getStrikes().remove(strike);\r\n            }\r\n        }\r\n\r\n        for (Map.Entry<Integer, Option> entry : optionsMap.entrySet()) {\r\n            Option option = entry.getValue();\r\n            if (strikeToRemove == option.getStrike()) {\r\n                optionsMap.remove(option);\r\n            }\r\n        }\r\n    }\r\n\r\n    public HashMap<Integer, Option> getOptionsMap() {\r\n        return optionsMap;\r\n    }\r\n\r\n    public Option getOption(String name) {\r\n\r\n        double targetStrike = Double.parseDouble(name.substring(1));\r\n\r\n        for (Strike strike : strikes) {\r\n            if (strike.getStrike() == targetStrike) {\r\n                if (name.toLowerCase().contains(\"c\")) {\r\n                    return strike.getCall();\r\n                } else {\r\n                    return strike.getPut();\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public double getOpAvg() {\r\n        return L.floor(getOpList().getAvg(), 100);\r\n    }\r\n\r\n    public void setOpAvg(double opAvg) {\r\n        int size = opList.size();\r\n        opList.clear();\r\n\r\n        for (int i = 0; i < size; i++) {\r\n            opList.add(opAvg);\r\n        }\r\n    }\r\n\r\n    public void checkOptionData() {\r\n        new Thread(() -> {\r\n\r\n            while (!isGotData()) {\r\n                try {\r\n\r\n                    // Sleep\r\n                    Thread.sleep(1000);\r\n                    boolean bool = true;\r\n\r\n                    double increment = client.getStrikeMargin();\r\n\r\n                    // For each strike\r\n                    double strikInMoney = iOptionsCalcs.getStrikeInMoney();\r\n                    double startStrike = strikInMoney - increment * 2;\r\n                    double endStrike = strikInMoney + increment * 2;\r\n\r\n                    for (double strikePrice = startStrike; strikePrice < endStrike; strikePrice += client.getStrikeMargin()) {\r\n\r\n                        Strike strike = getStrike(strikePrice);\r\n\r\n                        Option call = strike.getCall();\r\n                        Option put = strike.getPut();\r\n\r\n                        if (call.getBid() == 0 || call.getAsk() == 0 || put.getBid() == 0 || put.getAsk() == 0) {\r\n                            bool = false;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    // Exit the function\r\n                    if (bool) {\r\n                        setGotData(bool);\r\n                        Thread.currentThread().interrupt();\r\n                    }\r\n\r\n                } catch (InterruptedException e) {\r\n                    break;\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n        }).start();\r\n    }\r\n\r\n    // Claculate the index from options\r\n    public double getContract() {\r\n\r\n        if (contract != 0) {\r\n            return contract;\r\n        }\r\n\r\n        try {\r\n            ArrayList<Double> buys = new ArrayList<>();\r\n            ArrayList<Double> sells = new ArrayList<>();\r\n\r\n            double callAsk = 0;\r\n            double callBid = 0;\r\n            double putAsk = 0;\r\n            double putBid = 0;\r\n\r\n            for (Strike strike : getStrikes()) {\r\n                try {\r\n                    callAsk = strike.getCall().getAsk();\r\n                    callBid = strike.getCall().getBid();\r\n                    putAsk = strike.getPut().getAsk();\r\n                    putBid = strike.getPut().getBid();\r\n\r\n                    if (callAsk <= 0) {\r\n                        callAsk = 99999999;\r\n                    }\r\n                    if (putAsk <= 0) {\r\n                        putAsk = 99999999;\r\n                    }\r\n\r\n                    final double v = strike.getStrike() * (Math.exp((-props.getInterestZero() - 0.002 + iOptionsCalcs.getCalcDevidend()) * (getProps().getDays() / 360.0)));\r\n                    double buy = callAsk - putBid + v;\r\n                    double sell = callBid - putAsk + v;\r\n                    buys.add(buy);\r\n                    sells.add(sell);\r\n\r\n                } catch (Exception e) {\r\n                    System.out.println(client.getName() + \" getContract() Exception \");\r\n                }\r\n            }\r\n\r\n            double currentBidMin = Collections.min(buys);\r\n            double currentAskMax = Collections.max(sells);\r\n\r\n            // Update contract bid, ask\r\n            setContractBid(floor(currentBidMin, 100));\r\n            setContractAsk(floor(currentAskMax, 100));\r\n\r\n            bidMin = currentBidMin;\r\n            askMax = currentAskMax;\r\n\r\n            return floor(((bidMin + askMax) / 2), 100);\r\n        } catch (Exception e) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // Claculate the index from options\r\n    public double calcContractAbsolute() {\r\n\r\n        try {\r\n            ArrayList<Double> buys = new ArrayList<>();\r\n            ArrayList<Double> sells = new ArrayList<>();\r\n\r\n            double strikeInMoney = iOptionsCalcs.getStrikeInMoney();\r\n            double startStrike = strikeInMoney - (client.getStrikeMargin() * 5);\r\n            double endStrike = strikeInMoney + (client.getStrikeMargin() * 5);\r\n\r\n            for (double strikePrice = startStrike; strikePrice <= endStrike; strikePrice += client.getStrikeMargin()) {\r\n\r\n                Strike strike;\r\n                double call_ask = 0;\r\n                double call_bid = 0;\r\n                double put_ask = 0;\r\n                double put_bid = 0;\r\n\r\n                try {\r\n                    strike = getStrike(strikePrice);\r\n\r\n                    call_ask = strike.getCall().getAsk();\r\n                    call_bid = strike.getCall().getBid();\r\n                    put_ask = strike.getPut().getAsk();\r\n                    put_bid = strike.getPut().getBid();\r\n\r\n                    if (call_ask <= 0) {\r\n                        call_ask = 99999999;\r\n                    }\r\n                    if (put_ask <= 0) {\r\n                        put_ask = 99999999;\r\n                    }\r\n\r\n                    double v = (strikePrice / (Math.pow(props.getInterest(), (getAbsolutDays() / 360.0))));\r\n\r\n                    double buy = (call_ask - put_bid) + v;\r\n                    double sell = (call_bid - put_ask) + v;\r\n\r\n                    buys.add(buy);\r\n                    sells.add(sell);\r\n\r\n                } catch (Exception e) {\r\n                    // TODO: handle exception\r\n                }\r\n            }\r\n\r\n            double currentBidMin = Collections.min(buys);\r\n            double currentAskMax = Collections.max(sells);\r\n\r\n            double future = floor((currentBidMin + currentAskMax) / 2, 100);\r\n\r\n            return future;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    public double getAbsolutDays() {\r\n        double d = (int) ChronoUnit.DAYS.between(LocalDate.now(), getExpDate());\r\n        return d + 1;\r\n    }\r\n\r\n    public double getOp() {\r\n        return L.floor(getContract() - client.getIndex(), 100);\r\n    }\r\n\r\n    public Option getOption(String side, double targetStrike) {\r\n        for (Strike strike : strikes) {\r\n            if (strike.getStrike() == targetStrike) {\r\n                if (side.toLowerCase().contains(\"c\")) {\r\n                    return strike.getCall();\r\n                } else {\r\n                    return strike.getPut();\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public Option getOption(Class c, double targetStrike) {\r\n        for (Strike strike : strikes) {\r\n            if (strike.getStrike() == targetStrike) {\r\n                if (c == Call.class) {\r\n                    return strike.getCall();\r\n                } else {\r\n                    return strike.getPut();\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Return single strike by strike price (double)\r\n    public Strike getStrike(double strikePrice) {\r\n        for (Strike strike : strikes) {\r\n            if (strikePrice == strike.getStrike()) {\r\n                return strike;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Return list of strikes prices\r\n    public ArrayList<Double> getStrikePricesList() {\r\n        ArrayList<Double> list = new ArrayList<>();\r\n        strikes.forEach(strike -> list.add(strike.getStrike()));\r\n        return list;\r\n    }\r\n\r\n    // Remove strike from strikes arr by strike class\r\n    public void removeStrike(Strike strike) {\r\n        strikes.remove(strike);\r\n    }\r\n\r\n    // Add strike to strikes arr\r\n    public void addStrike(Strike strike) {\r\n\r\n        boolean contains = getStrikePricesList().contains(strike.getStrike());\r\n\r\n        // Not inside\r\n        if (!contains) {\r\n            strikes.add(strike);\r\n        }\r\n    }\r\n\r\n    public Option getOptionById(int id) {\r\n        return optionsMap.get(id);\r\n    }\r\n\r\n    // Set option in strikes arr\r\n    public void setOption(Option option) {\r\n\r\n        // Set min || max ID\r\n        setMinId(option.getId());\r\n        setMaxId(option.getId());\r\n\r\n        // HashMap\r\n        optionsMap.put(option.getId(), option);\r\n\r\n        // Strikes list\r\n        boolean callPut = option instanceof Call;\r\n\r\n        Strike strike = getStrike(option.getStrike());\r\n\r\n        if (strike != null) {\r\n\r\n            if (callPut) {\r\n                if (strike.getCall() == null) {\r\n                    strike.setCall((Call) option);\r\n                }\r\n            } else {\r\n                if (strike.getPut() == null) {\r\n                    strike.setPut((Put) option);\r\n                }\r\n            }\r\n        } else {\r\n\r\n            // Create new if doesn't exist\r\n            strike = new Strike();\r\n            strike.setStrike(option.getStrike());\r\n\r\n            if (callPut) {\r\n                strike.setCall((Call) option);\r\n            } else {\r\n                strike.setPut((Put) option);\r\n            }\r\n\r\n            // Add strike\r\n            addStrike(strike);\r\n        }\r\n    }\r\n\r\n    public List<Strike> getStrikes() {\r\n        return strikes;\r\n    }\r\n\r\n    public void setStrikes(List<Strike> strikes) {\r\n        this.strikes = strikes;\r\n    }\r\n\r\n    public String toStringVertical() {\r\n        String string = \"\";\r\n\r\n        for (Strike strike : strikes) {\r\n            string += strike.toString() + \"\\n\\n\";\r\n        }\r\n        return string;\r\n    }\r\n\r\n    private JSONObject getDataAsJson() {\r\n\r\n        JSONObject mainJson = new JSONObject();\r\n\r\n        JSONObject optionsData = new JSONObject();\r\n\r\n        JSONObject callJson;\r\n        JSONObject putJson;\r\n        JSONObject strikeJson;\r\n\r\n        for (Strike strike : strikes) {\r\n\r\n            callJson = new JSONObject();\r\n            putJson = new JSONObject();\r\n            strikeJson = new JSONObject();\r\n\r\n            Call call = strike.getCall();\r\n            callJson.put(JsonStrings.bid, call.getBid());\r\n            callJson.put(JsonStrings.ask, call.getAsk());\r\n            callJson.put(JsonStrings.optBidAskCounter, call.getBidAskCounter());\r\n\r\n            Put put = strike.getPut();\r\n            putJson.put(JsonStrings.bid, put.getBid());\r\n            putJson.put(JsonStrings.ask, put.getAsk());\r\n            putJson.put(JsonStrings.optBidAskCounter, put.getBidAskCounter());\r\n\r\n            strikeJson.put(JsonStrings.call, callJson);\r\n            strikeJson.put(JsonStrings.put, putJson);\r\n\r\n            optionsData.put(str(strike.getStrike()), strikeJson);\r\n        }\r\n\r\n        mainJson.put(JsonStrings.con, getContract());\r\n        mainJson.put(JsonStrings.opAvg, L.floor(getOpAvg(), 100));\r\n        mainJson.put(JsonStrings.data, optionsData);\r\n        mainJson.put(JsonStrings.conBidAskCounter, getConBidAskCounter());\r\n\r\n        return mainJson;\r\n    }\r\n\r\n    public JSONObject getResetDataAsJson() {\r\n        JSONObject mainJson = new JSONObject();\r\n\r\n        JSONObject optionsData = new JSONObject();\r\n\r\n        JSONObject callJson;\r\n        JSONObject putJson;\r\n        JSONObject strikeJson;\r\n\r\n        for (Strike strike : strikes) {\r\n\r\n            callJson = new JSONObject();\r\n            putJson = new JSONObject();\r\n            strikeJson = new JSONObject();\r\n\r\n            callJson.put(JsonStrings.bid, 0);\r\n            callJson.put(JsonStrings.ask, 0);\r\n            callJson.put(JsonStrings.optBidAskCounter, 0);\r\n\r\n            putJson.put(JsonStrings.bid, 0);\r\n            putJson.put(JsonStrings.ask, 0);\r\n            putJson.put(JsonStrings.optBidAskCounter, 0);\r\n\r\n            strikeJson.put(JsonStrings.call, callJson);\r\n            strikeJson.put(JsonStrings.put, putJson);\r\n\r\n            optionsData.put(str(strike.getStrike()), strikeJson);\r\n        }\r\n\r\n        mainJson.put(JsonStrings.con, 0);\r\n        mainJson.put(JsonStrings.opAvg, 0);\r\n        mainJson.put(JsonStrings.data, optionsData);\r\n        mainJson.put(JsonStrings.futBidAskCounter, 0);\r\n\r\n        return mainJson;\r\n    }\r\n\r\n    public void setOptionsData(JSONObject json) {\r\n        for (Strike strike : getStrikes()) {\r\n            try {\r\n                double strikePrice = strike.getStrike();\r\n\r\n                // Get data from json\r\n                JSONObject callJson = json.getJSONObject(str(strikePrice)).getJSONObject(\"call\");\r\n                JSONObject putJson = json.getJSONObject(str(strikePrice)).getJSONObject(\"put\");\r\n\r\n                // Set data to options\r\n                strike.getCall().setBidAskCounter(callJson.getInt(\"bid_ask_counter\"));\r\n                strike.getPut().setBidAskCounter(putJson.getInt(\"bid_ask_counter\"));\r\n\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n    }\r\n\r\n    public void resetOptionsBidAskCounter() {\r\n        try {\r\n            for (Strike strike : getStrikes()) {\r\n\r\n                Call call = strike.getCall();\r\n                Put put = strike.getPut();\r\n\r\n                call.setBidAskCounter(0);\r\n                call.getBidAskCounterList().clear();\r\n\r\n                put.setBidAskCounter(0);\r\n                put.getBidAskCounterList().clear();\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public double floor(double d, int zeros) {\r\n        return Math.floor(d * zeros) / zeros;\r\n    }\r\n\r\n    public String str(Object o) {\r\n        return String.valueOf(o);\r\n    }\r\n\r\n    public LocalDate getExpDate() {\r\n        return expDate;\r\n    }\r\n\r\n    public void setExpDate(LocalDate expDate) {\r\n        this.expDate = expDate;\r\n    }\r\n\r\n    public MyDoubleList getOpList() {\r\n        return opList;\r\n    }\r\n\r\n    public int getConBidAskCounter() {\r\n        return contractBidAskCounter;\r\n    }\r\n\r\n    public void setContractBidAskCounter(int contractBidAskCounter) {\r\n        this.contractBidAskCounter = contractBidAskCounter;\r\n    }\r\n\r\n    public LocalDate getToDay() {\r\n        return LocalDate.now();\r\n    }\r\n\r\n    public int getMinId() {\r\n        return minId;\r\n    }\r\n\r\n    public void setMinId(int minId) {\r\n\r\n        if (this.minId != 0) {\r\n\r\n            if (minId < this.minId) {\r\n                this.minId = minId;\r\n            }\r\n\r\n        } else {\r\n            this.minId = minId;\r\n        }\r\n    }\r\n\r\n    public int getMaxId() {\r\n        return maxId;\r\n    }\r\n\r\n    public void setMaxId(int maxId) {\r\n\r\n        if (this.maxId != 0) {\r\n\r\n            if (maxId > this.maxId) {\r\n                this.maxId = maxId;\r\n            }\r\n\r\n        } else {\r\n            this.maxId = maxId;\r\n        }\r\n\r\n    }\r\n\r\n    public int getBaseID() {\r\n        return baseID;\r\n    }\r\n\r\n    public void setBaseID(int baseID) {\r\n        this.baseID = baseID;\r\n    }\r\n\r\n    // ---------- Basic Functions ---------- //\r\n    private double dbl(String s) {\r\n        return Double.parseDouble(s);\r\n    }\r\n\r\n    private int INT(String s) {\r\n        return Integer.parseInt(s);\r\n    }\r\n\r\n    public boolean isRequested() {\r\n        return requested;\r\n    }\r\n\r\n    public void setRequested(boolean requested) {\r\n        this.requested = requested;\r\n    }\r\n\r\n    public boolean isGotData() {\r\n        return gotData;\r\n    }\r\n\r\n    public void setGotData(boolean gotData) {\r\n        this.gotData = gotData;\r\n    }\r\n\r\n    public double getContractBid() {\r\n        return contractBid;\r\n    }\r\n\r\n    public void setContractBid(double contractBid) {\r\n\r\n        // If increment state\r\n        if (contractBid > this.contractBid && conAskForCheck == this.contractAsk) {\r\n            contractBidAskCounter++;\r\n        }\r\n        this.contractBid = contractBid;\r\n\r\n        // Ask for bid change state\r\n        conBidForCheck = contractBid;\r\n        conAskForCheck = this.contractAsk;\r\n\r\n    }\r\n\r\n    public MyDoubleList getConAskList() {\r\n        return conAskList;\r\n    }\r\n\r\n    public MyDoubleList getConBidList() {\r\n        return conBidList;\r\n    }\r\n\r\n    public MyDoubleList getConList() {\r\n        return conList;\r\n    }\r\n\r\n    public MyDoubleList getOpAvgList() {\r\n        return opAvgList;\r\n    }\r\n\r\n    public MyTimeSeries getConBidAskCounterSeries() {\r\n        return conBidAskCounterSeries;\r\n    }\r\n\r\n    public MyTimeSeries getOpAvgSeries() {\r\n        return opAvgSeries;\r\n    }\r\n\r\n    public IOptionsCalcs getiOptionsCalcs() {\r\n        return iOptionsCalcs;\r\n    }\r\n\r\n    public double getCurrStrike() {\r\n        return currStrike;\r\n    }\r\n\r\n    public void setCurrStrike(double currStrike) {\r\n        this.currStrike = currStrike;\r\n    }\r\n\r\n    public OptionsProps getProps() {\r\n        return props;\r\n    }\r\n\r\n    public double getContractAsk() {\r\n        return contractAsk;\r\n    }\r\n\r\n    public void setContractAsk(double contractAsk) {\r\n\r\n        // If increment state\r\n        if (contractAsk > this.contractAsk && conBidForCheck == this.contractBid) {\r\n            contractBidAskCounter--;\r\n        }\r\n        this.contractAsk = contractAsk;\r\n\r\n        // Ask for bid change state\r\n        conAskForCheck = contractAsk;\r\n        conBidForCheck = this.contractBid;\r\n    }\r\n\r\n    public OptionsDDeCells getOptionsDDeCells() {\r\n        return optionsDDeCells;\r\n    }\r\n\r\n    @Override\r\n    public MyJson getAsJson() {\r\n        MyJson json = new MyJson();\r\n        json.put(JsonStrings.con, getContract());\r\n        json.put(JsonStrings.conBid, contractBid);\r\n        json.put(JsonStrings.conAsk, contractAsk);\r\n        json.put(JsonStrings.conBidAskCounter, contractBidAskCounter);\r\n        json.put(JsonStrings.opAvg, L.floor(getOpAvg(), 100));\r\n        json.put( JsonStrings.props, props.getAsJson() );\r\n        return json;\r\n    }\r\n\r\n    @Override\r\n    public void loadFromJson(MyJson json) {\r\n        setContractBidAskCounter(json.getInt(JsonStrings.conBidAskCounter));\r\n        getProps().loadFromJson( json.getMyJson( JsonStrings.props ) );\r\n    }\r\n\r\n    @Override\r\n    public MyJson getResetJson() {\r\n        return null;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/options/Options.java	(revision 73c23147d5ecb0b1bae74ab6bd36cb016dcf3875)
+++ src/main/java/options/Options.java	(date 1601447114415)
@@ -208,7 +208,7 @@
 
             while (!isGotData()) {
                 try {
-
+                    
                     // Sleep
                     Thread.sleep(1000);
                     boolean bool = true;
